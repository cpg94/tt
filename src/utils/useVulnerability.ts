import { useEffect, useState } from "react";
import { IVulnerability } from "../types";
import fetchVulnerabilities from "./fetchVulnerabilities";

const useVulnerability = (id?: string) => {
    const [loading, setLoading] = useState(false);
    const [vulnerability, setVulnerability] = useState<IVulnerability | null>(null)

    const getVulnerability = async () => {
        if (!id) return null

        setLoading(true)
        try {
            const vulnerabilityData = await fetchVulnerabilities();
            const vulnerabilityWithMatchingId = vulnerabilityData.find((vulnerabilityItem) => vulnerabilityItem.uuid === id)
            setVulnerability(vulnerabilityWithMatchingId ?? null)
        } catch (_) {
            setVulnerability(null)
        } finally {
            setLoading(false)
        }
    }

    useEffect(() => {
        getVulnerability();
    }, [id])

    return {
        vulnerability,
        loading
    }
}

export default useVulnerability